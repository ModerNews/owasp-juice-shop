name: Release on Version
on:
  push:
    branches: [master]

jobs:
  # Step 1:
  depcheck:
    permissions:
      packages: write
      contents: read
      statuses: read
      security-events: write

    name: Check Dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Depcheck
        uses: dependency-check/Dependency-Check_Action@main
        id: Depcheck
        with:
          project: ${{ github.repository }}
          path: "./juice-shop-master/"
          format: "HTML"
          args: >
            --failOnCVSS 7
            --enableRetired
            --exclude test/files/*
      - name: Upload Test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Depcheck report
          path: ${{github.workspace}}/reports

  # Step 4: gitleaks
  scan:
    permissions:
      packages: write
      contents: read
      statuses: read
      security-events: write
    name: gitleaks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Step 5: Semgrep
  semgrep:
    permissions:
      packages: write
      contents: read
      statuses: read
      security-events: write
    runs-on: ubuntu-latest
    container:
      image: semgrep/semgrep

    steps:
      - uses: actions/checkout@v4

      - name: Run Semgrep CE (Community)
        run: |
          semgrep scan --sarif --output=semgrep-results.sarif
          semgrep scan --json --output=semgrep-results.json

      - name: Upload Semgrep SARIF results to Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep-results.sarif

      - name: Upload Semgrep results as artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: semgrep-results
          path: |
            semgrep-results.json

  build:
    name: App Build
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      statuses: read
      security-events: write
      issues: write

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3.1.0
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.GITHUB_TOKEN}}

      - name: Determine Image Tags
        uses: docker/metadata-action@v5
        id: metadata
        with:
          images: ghcr.io/${{github.repository}}
          tags: |
            latest
            ${{github.ref_name}}
            ${{github.sha}}
      - name: Build Docker image (without pushing)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ./juice-shop-master/
          file: ./juice-shop-master/Dockerfile
          platforms: linux/amd64
          push: false
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            local-scan:latest
            ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
      - name: Test Docker Image Cache
        run: |
          docker images

      # Step 5: Trivy
      - name: Run Trivy vulnerability scanner
        if: always()
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: local-scan:latest
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"
          exit-code: "1" # Fail the step if vulnerabilities are found

      - name: Run Trivy vulnerability scanner (Artifcat)
        if: always()
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: local-scan:latest
          format: "template"
          template: "@$HOME/.local/bin/trivy-bin/contrib/html.tpl"
          output: "trivy-results.html"
          severity: "CRITICAL,HIGH"
          exit-code: "1" # Fail the step if vulnerabilities are found

      - name: Upload Trivy reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: |
            trivy-results.html

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always() # Always upload results even if Trivy scan fails
        with:
          sarif_file: "trivy-results.sarif"

      - name: Start Docker Container
        if: always()
        run: |
          docker run -d --name testing-container -p 127.0.0.1:3000:3000 local-scan:latest
          # Wait for application to start
          echo "Waiting for application to start..."
          for i in {1..30}; do
            if curl -f http://localhost:3000 >/dev/null 2>&1; then
              echo "Application is ready!"
              break
            fi
            echo "Attempt $i: Application not ready yet..."
            sleep 5
          done

      - name: ZAP Scan
        if: always()
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: "ghcr.io/zaproxy/zaproxy:stable"
          target: "http://localhost:3000"
          cmd_options: "-a"
          issue_title: "[ZAP SCAN] ${{ github.sha }}"

      - name: Push Docker image (only if scan passes)
        if: success() # Only runs if all previous steps succeeded
        uses: docker/build-push-action@v6
        with:
          context: ./juice-shop-master/
          file: ./juice-shop-master/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
